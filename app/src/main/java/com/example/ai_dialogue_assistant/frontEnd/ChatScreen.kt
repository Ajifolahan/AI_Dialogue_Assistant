package com.example.ai_dialogue_assistant.frontEnd

import androidx.compose.foundation.background
import androidx.compose.runtime.Composable
import cafe.adriel.voyager.core.screen.Screen
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp


class ChatScreen : Screen {
    @Composable
    override fun Content() {
        val modifier = Modifier
        var userInput by remember { mutableStateOf("") }
        val conversationHistory = remember { mutableStateListOf<Message>() }

        Column(
            modifier = modifier
                .fillMaxSize()
                .background(Color.LightGray)
        ) {
            LazyColumn(modifier = modifier.weight(1f)) {
                items(conversationHistory) { message ->
                    Card(
                        shape = RoundedCornerShape(10.dp),
                        modifier = modifier
                            .padding(8.dp)
                            .align(
                                if (message.type == "user") Alignment.End else Alignment.Start
                            )
                    ) {
                        Text(
                            text = message.text,
                            fontFamily = FontFamily.Serif,
                            fontSize = if (message.type == "user") 15.sp else 20.sp,
                            modifier = modifier.padding(16.dp)
                        )
                    }
                }
            }


            Spacer(modifier = modifier.weight(1f))

            Row(modifier = modifier.padding(16.dp)) {
                TextField(
                    value = userInput,
                    onValueChange = { userInput = it },
                    modifier = modifier.weight(1f)
                )
                Button(
                    onClick = {
                        if (userInput.isNotBlank()) {
                            conversationHistory.add(Message(userInput, "user"))
                            userInput = ""
                            // TODO: Call the Gemini API here and add the AI's response to the conversation history
                            //use a coroutine to run it
                        }
                    },
                    modifier = modifier.padding(start = 16.dp)
                ) {
                    Text("Send")
                }
            }
        }
    }
}


//to hold information about a message in the chat. It has two properties:
//text: This is the actual content of the message.
//type: This indicates who sent the message.
// It can be "user" for messages sent by the user, or "ai" for messages generated by the AI.
data class Message(val text: String, val type: String)


@Preview(showBackground = true)
@Composable
fun Previewing() {
    ChatScreen().Content()
}